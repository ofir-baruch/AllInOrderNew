@using AllinOrder_Shahaf_Ofir_Snir.Shared.Entities@inject HttpClient Http<div style="width: 90px;text-align-last: center; height: 90px; display: inline-block; margin-right: 20px; background-color: whitesmoke; border-color: #7B4C2D; border-width:medium; border-style:solid;" >    @if (Istxt == false && item.IsPic == false)    {<div style="position:fixed; margin-right: 76px; margin-top:11px;" >    <MudIconButton Icon="@Icons.Filled.Edit" Style="color: #795548; margin-right: -75px; position:center" Size="Size.Small" @onclick="()=>ChangeTxt()" />    <MudIconButton Icon="@Icons.Filled.AddPhotoAlternate" Color="Color.Primary" for="@fileUploadId" HtmlTag="label" Style="padding: 0px; position:center"/></div>                <InputFile id="@fileUploadId" OnChange="UploadFile" hidden />}    @if (ItemsCount > 3)    {        <div Style="position:fixed; margin-right: 0px; margin-top: 59px;">        <MudIconButton Icon="@Icons.Filled.Delete"  Size="Size.Small" @onclick="()=>deleteItem()" Style="color:#795548 ;" />        </div> }    @if (item.IsPic == true)    {                <img src="@item.ItemContent" width="70" id="itemImage"  style="position:fixed; margin-top:5px; margin-right:8px;"/>                <div Style="position: fixed; margin-right: 58px; margin-top: 32px;">                <MudIconButton Icon="@Icons.Filled.Cancel"   Size="Size.Small" @onclick="()=>deletePic()" Style="color: #f44336;"/>                 </div>                    }                            else                            {                                if (Istxt == true)                                {                                                                      <MudTextField Lines="2" Style="width: 84px; height: 60px; position: fixed; margin-top: -5px; " T="string" MaxLength="withNikud?25:20" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Variant="Variant.Outlined" @bind-Value="item.ItemContent" />                                    <MudIconButton Icon="@Icons.Filled.Cancel" Style="color: #f44336; position: fixed; margin-right: 59px; margin-top: 55px;"  Size="Size.Small" @onclick="()=>deleteTxt()" />}                                                                  }</div>@code{



    [Parameter]    public Item item { get; set; }    [Parameter]    public bool withNikud { get; set; }    [Parameter]    public int ItemsCount { get; set; }    [Parameter]    public int userId { get; set; }    [Parameter]    public int QId { get; set; }    [Parameter]    public EventCallback ondelete { get; set; }


    bool Istxt = false;
    string fileUploadId = "";
    List<Item> itemslist = new List<Item>();    Item CurrentItem = new Item();    protected override void OnParametersSet()    {        Istxt = item.ItemContent != "" && item.IsPic == false && item.ItemContent != null;
        fileUploadId = "FileInputItems" + item.ItemPlace;        Console.WriteLine("$" + item.ItemContent + "$");    }    private IEnumerable<string> MaxCharacters(string ch)    {        int max = withNikud ? 25 : 20;        if (!string.IsNullOrEmpty(ch) && max < ch?.Length)        {            yield return "Max " + max + " characters";        }    }

    //קוד להעלאת תמונות
    string myFileImage;    long maxFileSize = 4194304;    private async Task UploadFile(InputFileChangeEventArgs e)    {        Console.WriteLine(item.ItemPlace);        var imageFiles = e.GetMultipleFiles();        foreach (var file in imageFiles)        {            if (file.Size <= maxFileSize)            {                var buffer = new byte[file.Size];                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);                var imageBase64 = Convert.ToBase64String(buffer);                var saveResponse = await Http.PostAsJsonAsync("api/Photos/upload", imageBase64);                if (saveResponse.IsSuccessStatusCode == true)                {                    string resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;                    myFileImage = resizeUrl;                    item.ItemContent = resizeUrl;                    item.IsPic = true;                    Console.WriteLine(resizeUrl);                }            }        }    }    private async Task deletePic()    {        List<string> images = new List<string>();        images.Add(item.ItemContent);        var DeleteResponse = await Http.PostAsJsonAsync("api/Photos/deleteImages", images);        if (DeleteResponse.IsSuccessStatusCode == true)        {            item.ItemContent = "";            item.IsPic = false;            Console.WriteLine("נמחק");        }    }    void ChangeTxt()    {        Istxt = true;    }    void deleteTxt()    {        Istxt = false;        item.ItemContent = "";    }    async Task deleteItem()    {        if (item.IsPic == true)        {            deletePic();        }        await ondelete.InvokeAsync(item);    }}